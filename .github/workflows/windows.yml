name: Windows
on: 
  # push代码时触发workflow
  push:
    # 忽略README.md
    paths-ignore:
      - 'README.md'
      - 'LICENSE'
  # pull_request时触发workflow
  pull_request:
    # 忽略README.md
    paths-ignore:
      - 'README.md'
      - 'LICENSE'
jobs:
  build:
    name: Build
    # 运行平台， windows-latest目前是windows server 2019
    runs-on: windows-latest
    strategy:
      # 矩阵配置
      matrix:
        qt_ver: [5.9.8,5.12.6]
        qt_target: [desktop]
        qt_arch: [win64_msvc2017_64, win32_msvc2017]
        # 从矩阵中除外的配置
        exclude: 
          # 不存在5.9.8-win32_msvc2017的版本
          - qt_ver: 5.9.8
            qt_arch: win32_msvc2017
    # 步骤
    steps:
      # 安装Qt
      - name: Install Qt
        # 缓存未命中时才安装
        if: steps.cacheqt.outputs.cache-hit != 'true'
        # 使用外部action。这个action专门用来安装Qt
        uses: jurplel/install-qt-action@v2.0.0
        with:
          # Version of Qt to install
          version: ${{ matrix.qt_ver }}
          # Target platform for build
          target: ${{ matrix.qt_target }}
          # Architecture for Windows/Android
          arch: ${{ matrix.qt_arch }}
      # 拉取代码
      - uses: actions/checkout@v1
        with:
          fetch-depth: 1
      # 条件编译msvc-x64
      - name: build-msvc-x64
        if: contains(matrix.qt_arch,'msvc') && contains(matrix.qt_arch,'win64')
        shell: cmd
        run: |
          call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
          qmake
          nmake
      # 条件编译msvc-x86
      - name: build-msvc-x86
        if: contains(matrix.qt_arch,'msvc') && contains(matrix.qt_arch,'win32')
        shell: cmd
        run: |
          call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars32.bat"
          qmake
          nmake
      # 条件缓存
      - name: CacheQt
        id: cacheqt
        uses: actions/cache@v1
        # cache有大小限制，单个缓存不超过400M，整个仓库的缓存不超过2G。所以这里只缓存一个特定版本。
        if: matrix.qt_ver == '5.12.6' && matrix.qt_arch == 'win64_msvc2017_64'
        with:
          path: ${{ env.Qt5_Dir }}
          key: ${{ runner.OS }}-Qt-${{ matrix.qt_ver }}-${{ matrix.qt_target }}-${{ matrix.qt_arch }}
      # 设置后续step通用的环境变量
      - name: setEnv
        if: startsWith(github.event.ref, 'refs/tags/')
        shell: pwsh
        env:
          packageInfo: ${{ matrix.qt_ver }}-${{ matrix.qt_target }}-${{ matrix.qt_arch }}
        run: |
          $PACKAGE_INFO = ${env:packageInfo}
          # actions 特殊语法
          echo "::set-env name=packageName::$PACKAGE_INFO"
          Write-Host 'packageName:'${env:packageName}
      # tag部署
      - name: package
        if: startsWith(github.event.ref, 'refs/tags/')
        env:
          VCINSTALLDIR: 'C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC'
        shell: pwsh
        run: |
          New-Item -ItemType Directory ${env:packageName}
          Copy-Item bin\HelloActions-Qt.exe ${env:packageName}\
          windeployqt --qmldir . ${env:packageName}\HelloActions-Qt.exe
      # 打包
      - name: CompressArchive
        if: startsWith(github.event.ref, 'refs/tags/')
        shell: pwsh
        run: |
          Compress-Archive -Path ${env:packageName} ${env:packageName}'.zip'
      # tag 创建Release
      - name: createRelease
        id: create_release
        if: startsWith(github.event.ref, 'refs/tags/')
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        uses: actions/create-release@v1.0.0
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: ${{ github.event.head_commit.message }}
          draft: false
          prerelease: false
      # tag 上传Release
      - name: uploadRelease
        id: uploadRelease
        if: startsWith(github.event.ref, 'refs/tags/')
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        uses: actions/upload-release-asset@v1.0.1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./${{ env.packageName }}.zip
          asset_name: ${{ env.packageName }}.zip
          asset_content_type: application/zip

