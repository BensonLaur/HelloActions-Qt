name: QtCI
on: 
  push:
    paths-ignore:
      - 'README.md'
      - 'LICENSE'
  pull_request:
    paths-ignore:
      - 'README.md'
      - 'LICENSE'
jobs:
  windowsBuildJob:
    name: windows
    runs-on: windows-latest
    strategy:
      matrix:
        qt_ver: [5.9.8,5.12.6]
        qt_target: [desktop]
        qt_arch: [win64_msvc2017_64, win32_msvc2017]
        exclude: 
          - qt_ver: 5.9.8
            qt_arch: win32_msvc2017
        include:
          - qt_arch: win64_msvc2017_64
            msvc_arch: x64
          - qt_arch: win32_msvc2017
            msvc_arch: x86
    env:
      targetName: HelloActions-Qt.exe
    steps:
      #安装Qt
      - name: Install Qt
        uses: jurplel/install-qt-action@v2.0.0
        with:
          version: ${{ matrix.qt_ver }}
          target: ${{ matrix.qt_target }}
          arch: ${{ matrix.qt_arch }}
      # 获取代码
      - uses: actions/checkout@v1
        with:
          fetch-depth: 1
      # 编译msvc
      - name: build-msvc
        shell: cmd
        env:
          vc_arch: ${{ matrix.msvc_arch }}
        run: |
          call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" %vc_arch%
          qmake
          nmake
      # # tag打包
      # - name: package
      #   if: startsWith(github.event.ref, 'refs/tags/')
      #   env:
      #     VCINSTALLDIR: 'C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC'
      #     packageName: ${{ matrix.qt_ver }}-${{ matrix.qt_target }}-${{ matrix.qt_arch }}
      #   shell: pwsh
      #   run: |
      #     New-Item -ItemType Directory ${env:packageName}
      #     Copy-Item bin\HelloActions-Qt.exe ${env:packageName}\
      #     windeployqt --qmldir . ${env:packageName}\HelloActions-Qt.exe
      # # tag存储
      # - name: uploadArtifact
      #   if: startsWith(github.event.ref, 'refs/tags/')
      #   uses: actions/upload-artifact@v1
      #   with:
      #     name: ${{ matrix.qt_ver }}-${{ matrix.qt_target }}-${{ matrix.qt_arch }}
      #     path: ${{ matrix.qt_ver }}-${{ matrix.qt_target }}-${{ matrix.qt_arch }}.zip
      # 设置后续step通用的环境变量
      # - name: setEnv
      #   if: startsWith(github.event.ref, 'refs/tags/')
      #   shell: pwsh
      #   env:
      #     packageInfo: ${{ matrix.qt_ver }}-${{ matrix.qt_target }}-${{ matrix.qt_arch }}
      #   run: |
      #     $PACKAGE_INFO = ${env:packageInfo}
      #     # actions 特殊语法
      #     echo "::set-env name=packageName::$PACKAGE_INFO"
      #     Write-Host 'packageName:'${env:packageName}
      # # tag部署
      # - name: package
      #   if: startsWith(github.event.ref, 'refs/tags/')
      #   env:
      #     VCINSTALLDIR: 'C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC'
      #   shell: pwsh
      #   run: |
      #     New-Item -ItemType Directory ${env:packageName}
      #     Copy-Item bin\HelloActions-Qt.exe ${env:packageName}\
      #     windeployqt --qmldir . ${env:packageName}\HelloActions-Qt.exe
      # # 打包
      # - name: CompressArchive
      #   if: startsWith(github.event.ref, 'refs/tags/')
      #   shell: pwsh
      #   run: |
      #     Compress-Archive -Path ${env:packageName} ${env:packageName}'.zip'
      # # tag 创建Release
      # - name: createRelease
      #   id: createRelease
      #   if: startsWith(github.event.ref, 'refs/tags/')
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   uses: actions/create-release@v1.0.0
      #   with:
      #     tag_name: ${{ github.ref }}
      #     release_name: Release ${{ github.ref }}
      #     body: ${{ github.event.head_commit.message }}
      #     draft: false
      #     prerelease: false
      # # tag 上传Release
      # - name: uploadRelease
      #   id: uploadRelease
      #   if: startsWith(github.event.ref, 'refs/tags/')
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   uses: actions/upload-release-asset@v1.0.1
      #   with:
      #     upload_url: ${{ steps.createRelease.outputs.upload_url }}
      #     asset_path: ./${{ env.packageName }}.zip
      #     asset_name: ${{ env.packageName }}.zip
      #     asset_content_type: application/zip
  ubuntuBuildJob:
    name: ubuntu
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-16.04,ubuntu-18.04]
        qt_ver: [5.9.8,5.12.6]
    steps:         
      - name: Install Qt
        uses: jurplel/install-qt-action@v2.0.0
        with:
          version: ${{ matrix.qt_ver }}
      # Ubuntu 安装 OpenGL相关库
      - name: ubuntu install GL library
        run: sudo apt-get install -y libglew-dev libglfw3-dev
      - uses: actions/checkout@v1
        with:
          fetch-depth: 1          
      - name: build ubuntu
        run: |
          qmake
          make
  macosBuildJob:
    name: macos
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest]
        qt_ver: [5.9.8,5.12.6]
    steps:
      - name: Install Qt
        uses: jurplel/install-qt-action@v2.0.0
        with:
          version: ${{ matrix.qt_ver }}
      - uses: actions/checkout@v1
        with:
          fetch-depth: 1
      - name: build macos
        run: |
          qmake
          make
  iosBuildJob:
    name: ios
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest]
        qt_ver: [5.12.6]
        qt_target: [ios]
    steps:
      - uses: actions/checkout@v1
        with:
          fetch-depth: 1
      - name: Install Qt
        uses: jurplel/install-qt-action@v2.0.0
        with:
          version: ${{ matrix.qt_ver }}
          target: ${{ matrix.qt_target }}
      - name: build ios
        run: |
          qmake -r -spec macx-ios-clang CONFIG+=release CONFIG+=iphoneos
          make
  androidBuildJob:
    name: android
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        qt_ver: [5.12.6]
        qt_target: [android]
        # android_arm64_v8a 暂时不支持. install-qt-action 依赖的aqtinstall版本为0.5*,需要升级
        # qt_arch: [android_x86,android_armv7,android_arm64_v8a]
        qt_arch: [android_x86,android_armv7]
    steps:
      - uses: actions/checkout@v1
        with:
          fetch-depth: 1
      - name: Install Qt
        uses: jurplel/install-qt-action@v2.0.0
        with:
          version: ${{ matrix.qt_ver }}
          target: ${{ matrix.qt_target }}
          arch: ${{ matrix.qt_arch }}
      - name: build android
        run: |
          export ANDROID_SDK_ROOT=$ANDROID_HOME
          export ANDROID_NDK_ROOT=$ANDROID_HOME/ndk-bundle
          qmake
          make
